#steps to importing libraries in cpp
1. Use find_package to locate libraries.
e.g. find_package(OpenCV REQUIRED)
2. Use ament_target_dependencies or target_link_libraries to link dependencies.
e.g. ament_target_dependencies(perception_node_cpp OpenCV)
3. Use target_include_directories to include headers if needed.
e.g. target_include_directories(perception_node_cpp ${OpenCV_INCLUDE_DIRS})
4. Ensure proper linking (static or shared libraries) based on your needs.
e.g. target_link_libraries(perception_node_cpp ${OpenCV_LIBS})

OpenCV_INCLUDE_DIRS - contains the directories where OpenCV's header files (e.g., opencv2/opencv.hpp) are located
OpenCV_LIBS - contains the paths to the compiled OpenCV libraries (e.g., opencv_core, opencv_imgproc, opencv_highgui) that need to be linked to your executable or library

#steps to import .hpp files

1. Place .hpp file in the install directory 
2. #include "<file_name>.hpp"
3. Add the install directory to the include path in the CMakeLists.txt file
e.g.
target_include_directories(perception_node_cpp
    PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
)

===============================================================================================

#threads

1. when two threads run at the same time, they might access the same memory location at the 
   same time and result in thread safety issues. 
   E.g.
   // ‚ùå NOT thread safe
    int counter = 0;

    void incrementCounter() {
        counter++;  // This operation isn't atomic!
    }

    int main() {
        std::thread t1(incrementCounter);
        std::thread t2(incrementCounter);
        t1.join();
        t2.join();
        // counter might not be 2!
    }
2. Could use mutual exclusion that locks the code to a single thread at a time to prevent this
   E.g.
    std::mutex mtx;
    int shared_value = 0;

    void updateValue() {
        mtx.lock();      // Lock the mutex
        shared_value++;  // Critical section
        mtx.unlock();    // Unlock the mutex
    }

    // Better way using RAII (automatically unlocks when lock_guard is destroyed):
    void updateValueSafer() {
        std::lock_guard<std::mutex> lock(mtx);  // Locks automatically
        shared_value++;
        // Automatically unlocks when function ends
    }
3. Or use atomic operations to only allow one thread to access the varaible at a time
   E.g.
    std::atomic<int> atomic_counter{0};  // Atomic integer

    void increment() {
        atomic_counter++;  // This operation is atomic
    }

    void complexOperation() {
        // Load, add, and store are all done atomically
        atomic_counter.fetch_add(1);
        
        // Can also do atomic comparisons
        int expected = 1;
        bool success = atomic_counter.compare_exchange_strong(expected, 2);
    }
   