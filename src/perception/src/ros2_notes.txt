#Building a subscriber
class MyNode : public rclcpp::Node {
private:
    // Declare subscriber as member variable
    rclcpp::Subscription<sensor_msgs::msg::PointCloud2>::SharedPtr lidar_subscriber_;
    
    // Callback function
    void lidarCallback(const sensor_msgs::msg::PointCloud2::SharedPtr msg) {
        // Process the point cloud data
        RCLCPP_INFO(this->get_logger(), "Received point cloud with %d points", 
            msg->width * msg->height);
    }

public:
    MyNode() : Node("my_node") {
        // Create subscriber in constructor
        lidar_subscriber_ = this->create_subscription<sensor_msgs::msg::PointCloud2>(
            "/lidar/points",  // topic name
            10,              // QoS history depth
            std::bind(&MyNode::lidarCallback, this, std::placeholders::_1)
        );
    }
};

===============================================================================================

#Building a publisher

class PublisherNode : public rclcpp::Node {
private:
    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr publisher_;
    rclcpp::TimerBase::SharedPtr timer_;
    
    void timerCallback() {
        auto message = std_msgs::msg::String();
        message.data = "Timer triggered message";
        publisher_->publish(message);
    }
    
public:
    PublisherNode() : Node("publisher_node") {
        // Create publisher
        publisher_ = this->create_publisher<std_msgs::msg::String>("topic", 10);
        
        // Create timer that publishes every second
        timer_ = this->create_wall_timer(
            std::chrono::seconds(1),
            std::bind(&PublisherNode::timerCallback, this)
        );
    }
};
===============================================================================================

#Building a timer
class MyNode : public rclcpp::Node {
private:
    rclcpp::TimerBase::SharedPtr timer_;

public:
    MyNode() : Node("my_node") {
        timer_ = this->create_wall_timer(std::chrono::seconds(1), 
            std::bind(&MyNode::timerCallback, this));
    }
};

===============================================================================================

#What if I used pointer instead of shared_ptr?
1. The ROS 2 middleware expects shared pointers
2. shared_ptr is a smart pointer that manages the memory of an object through a pointer
   so it avoids memory leaks and double frees
3. Allows reference counting
   e.g.    
   std::shared_ptr<int> ptr1(new int(42));
   std::shared_ptr<int> ptr2 = ptr1;  
   ptr1.use_count();  // Returns 2
4. Thread safety
   // Thread safe across multiple threads
   void thread1(std::shared_ptr<Data> data) { ... }
   void thread2(std::shared_ptr<Data> data) { ... }

===============================================================================================

#How to use config.yaml parameters in ROS2

1. Declare parameters in node:
   e.g.
    // In your node's constructor or init function
    this->declare_parameter<std::string>("camera_topic", "");  // Empty default
    this->declare_parameter<double>("camera_capture_rate", 0.0);
    this->declare_parameter<bool>("debug", false);

    // For arrays/vectors
    this->declare_parameter<std::vector<double>>("distortion", std::vector<double>(5, 0.0));  // 5 zeros

2. Create a config.yaml file in the package
   e.g.
    perception_node_cpp:  # Must match your node name
        ros__parameters:
            camera_topic: "synced_left_image"
            camera_capture_rate: 33.0
            debug: true
            distortion: [-0.363003, 0.113201, -0.000775, 0.000498, 0.000000]

3. Create a launch file (launch/perception.launch.xml) to load the config
    e.g.
     <launch>
         <node pkg="perception" exec="perception_node_cpp" name="perception_node_cpp">
             <param from="$(find-pkg-share perception)/config/config.yaml"/>
         </node>
     </launch>

4. Read the parameters in the node:
   e.g.
    // Get the values after declaring them
    camera_topic_ = this->get_parameter("camera_topic").as_string();
    camera_capture_rate_ = this->get_parameter("camera_capture_rate").as_double();
    debug_ = this->get_parameter("debug").as_bool();

    // For arrays
    auto distortion_vec = this->get_parameter("distortion").as_double_array();

5. build then run:
    ros2 launch perception perception.launch.xml
