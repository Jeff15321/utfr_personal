cmake_minimum_required(VERSION 3.5)
project(lidar_pipeline)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

## Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()


find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(PCL REQUIRED)


ament_export_dependencies(${THIS_PACKAGE_INCLUDE_DEPENDS})

include_directories(
    ${catkin_INCLUDE_DIRS}
    ${PCL_INCLUDE_DIRS}  # Ensure PCL headers are included
)

link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})

add_library(${PROJECT_NAME} src/filter.cpp src/clusterer.cpp src/lidar_node.cpp)

# Ensure your nodes link against PCL
target_link_libraries(${PROJECT_NAME} ${PCL_LIBRARIES} ${catkin_LIBRARIES})

# If you have an executable node
add_executable(lidar_node src/lidar_node.cpp)
ament_target_dependencies(lidar_node rclcpp std_msgs geometry_msgs sensor_msgs)

# Tests
#catkin_add_gtest(${PROJECT_NAME}-filter_test test/filter_test.cpp)
#target_link_libraries(${PROJECT_NAME}-filter_test ${PROJECT_NAME} ${PCL_LIBRARIES} ${catkin_LIBRARIES})

#catkin_add_gtest(${PROJECT_NAME}-clusterer_test test/clusterer_test.cpp)
#target_link_libraries(${PROJECT_NAME}-clusterer_test ${PROJECT_NAME} ${PCL_LIBRARIES} ${catkin_LIBRARIES})
ament_package()